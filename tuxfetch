#!/bin/sh
## read system info

## hostname
read -r host </proc/sys/kernel/hostname

## os (distro)
read -r kernel </proc/sys/kernel/osrelease
. /etc/os-release

## define eq for ram (do not modify this)
eq() {
	case $1 in
	$2) ;;
	*) return 1 ;;
	esac
}

## wm
[ ! "$wm" ] && [ "$DISPLAY" ] && command -v xprop >/dev/null && {
	id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)
	id=${id##* }
	wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t |
		grep '^_NET_WM_NAME' | cut -d\" -f 2)
}

## kernel
read -r _ _ version _ </proc/version
ke=${version%%-*}

## optionals

## terminal
while [ ! "$term" ]; do
	while read -r line; do
		eq "$line" 'PPid*' && ppid=${line##*:?} && break
	done <"/proc/${ppid:-$PPID}/status"

	[ "$pppid" = "$ppid" ] && break
	pppid=$ppid

	read -r name <"/proc/$ppid/comm"

	case $name in
	*sh | "${0##*/}") ;;
	*[Ll]ogin* | *init* | *systemd*) break ;;
	*) term=$name ;;
	esac
done

## package manager
manager=$(which nix-env yum dnf rpm apt brew port zypper pacman xbps-query pkg emerge cave apk kiss brl yay cpm eopkg 2>/dev/null)
manager=${manager##*/}

## packages detection
case $manager in
cpm) packages="$(cpm C)" ;;
brew) packages="$(brew list --formula | wc -l)" ;;
port) packages=$(port installed | tot) ;;
apt) packages="$(dpkg-query -f '${binary:Package}\n' -W | wc -l)" ;;
rpm) packages="$(rpm -qa --last | wc -l)" ;;
yum) packages="$(yum list installed | wc -l)" ;;
dnf) packages="$(dnf list installed | wc -l)" ;;
zypper) packages="$(zypper se | wc -l)" ;;
pacman) packages="$(pacman -Q | wc -l)" ;;
yay) packages="$(yay -Q | wc -l)" ;;
kiss) packages="$(kiss list | wc -l)" ;;
pkg | emerge) packages="$(qlist -I | wc -l)" ;;
cave) packages="$(cave show installed-slots | wc -l)" ;;
xbps-query) packages="$(xbps-query -l | wc -l)" ;;
nix-env) packages="$(nix-store -q --requisites /run/current-system/sw | wc -l)" ;;
apk) packages="$(apk list --installed | wc -l)" ;;
brl) packages="$(brl list | wc -l)" ;;
eopkg) packages="$(eopkg li | wc -l)" ;;
*) packages="idk" ;;
esac

## display protocol
[ "$DISPLAY" ] && displayprot="x11"
[ "$WAYLAND_DISPLAY" ] && displayprot="wayland"
[ ! "$displayprot" ] && displayprot="tty"

## resolution
unset i resolution

command -v xrandr >/dev/null && {
	for i in $(xrandr --current | grep ' connected' | grep -o '[0-9]\+x[0-9]\+'); do
		resolution="$resolution$i, "
	done
	resolution=${resolution%, }
}

## cpu
while read -r line; do
	case $line in
	vendor_id*) vendor="${line##*: } " ;;
	model\ name*)
		cpu=${line##*: }
		break
		;;
	esac
done </proc/cpuinfo

vendor=${vendor##*Authentic}
vendor=${vendor##*Genuine}
cpu=${cpu##*) }
cpu=${cpu%% @*}
cpu=${cpu%% CPU}
cpu=${cpu##CPU }
cpu=${cpu##*AMD }
cpu=${cpu%% with*}
cpu=${cpu% *-Core*}

## ram
while read -r line; do
	eq "$line" 'MemTotal*' && set -- $line && break
done </proc/meminfo
mem="$(($2 / 1000))"
mem="${mem::2}"
mem="${mem}GB"

## gpu
gpu=$(lspci | grep -i vga | awk -F ": " '{print $2}' | awk '{print $5,$6,$7}' | tr -d '[]' | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ + /g')

## uptime
IFS=. read -r uptime _ </proc/uptime
d=$((uptime / 60 / 60 / 24))
up=$(printf %02d:%02d $((uptime / 60 / 60 % 24)) $((uptime / 60 % 60)))
[ "$d" -gt 0 ] && up="${d}d $up"

## model
read -r model </sys/devices/virtual/dmi/id/product_name

## optionals ends here

## colors
bold='[1m'
black='[30m'
red='[31m'
green='[32m'
yellow='[33m'
blue='[34m'
magenta='[35m'
cyan='[36m'
white='[37m'
grey='[90m'
reset='[0m'

## ascii
ARTR1="${white}${bold}      'd0KK0x,       ${reset}"
ARTR2="${white}${bold}     cWWWWWWWWd          ${reset}"
ARTR3="${white}${bold}     XWWWWWWWWW          ${reset}"
ARTR4="${white}${bold}     NNc.NN';NN          ${reset}"
ARTR5="${white}${bold}    cNX      0No         ${reset}"
ARTR6="${white}${bold}   cXX.       XXo        ${reset}"
ARTR7="${white}${bold}  oK0          kKx       ${reset}"
ARTR8="${white}${bold} dKk            dKx      ${reset}"
ARTR9="${white}${bold}'00.             00:     ${reset}"
ARTR10="${white}${bold};0; .  .    .  ..'0l     ${reset}"
ARTR11="${white}${bold} .'xOOOO;  'OOOOk'.      ${reset}"
ARTR12="${white}${bold}  dOOOOOd  lOOOOOx      ${reset}"
ARTR13="${white}${bold}   .kkkkl  ;kkkk.      ${reset}"

# output

cat <<-EOF

	  ${ARTR1}${cyan}${USER}${white}@${magenta}${host}
	  ${ARTR2}${cyan}os${white} ~ ${magenta}${PRETTY_NAME}
	  ${ARTR3}${cyan}sh${white} ~ ${magenta}${SHELL##*/}
	  ${ARTR4}${cyan}te${white} ~ ${magenta}${term}
	  ${ARTR5}${cyan}up${white} ~ ${magenta}${up}
	  ${ARTR6}${cyan}cp${white} ~ ${magenta}${vendor}${cpu}
	  ${ARTR7}${cyan}gp${white} ~ ${magenta}${gpu}
	  ${ARTR8}${cyan}ra${white} ~ ${magenta}${mem}
	  ${ARTR9}${cyan}de${white} ~ ${magenta}${XDG_CURRENT_DESKTOP} ${displayprot}
	  ${ARTR10}${cyan}wm${white} ~ ${magenta}${wm}
	  ${ARTR11}${cyan}kr${white} ~ ${magenta}${ke}
	  ${ARTR12}
	  ${ARTR13}${black}ï¨µ${red}ï¨µ${green}ï¨µ${yellow}ï¨µ${blue}ï¨µ${magenta}ï¨µ${cyan}ï¨µ${reset}

EOF
